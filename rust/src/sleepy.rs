// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: jclmnop.provider.sleepy

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message,
        MessageDispatch, MessageFormat, SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

/// Allows actors to `sleep` for a specified duration, or until a desired time.
/// contractId: "jclmnop:sleepy"
/// wasmbus.contractId: jclmnop:sleepy
/// wasmbus.providerReceive
#[async_trait]
pub trait Sleepy {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "jclmnop:sleepy"
    }
    /// Sleep for a specified number of milliseconds
    /// ```
    /// # use wasmcloud_interface_sleepy::SleepySender;
    /// # async fn sleep_for_5_seconds() {
    /// let sleepy = SleepySender::new();
    /// // sleep for 5 seconds
    /// sleepy.sleep(5000).await;
    /// # }
    async fn sleep(&self, ctx: &Context, arg: &u32) -> RpcResult<()>;
    /// Sleep until a specified time, provided as a `wasmbus_rpc::Timestamp` struct.
    /// If the specified time is in the past, the operation will return immediately.
    /// ```
    /// # use wasmcloud_interface_sleepy::SleepySender;
    /// # use wasmbus_rpc::Timestamp;
    /// # async fn sleep_until_5_seconds() {
    /// let sleepy = SleepySender::new();
    /// let now = Timestamp::now();
    /// let five_seconds = Timestamp::new(now.sec + 5, now.nsec);
    /// // sleep until 5 seconds from now
    /// sleepy.sleep_until(five_seconds).await;
    /// # }
    async fn sleep_until(
        &self,
        ctx: &Context,
        arg: &Timestamp,
    ) -> RpcResult<()>;
}

/// SleepyReceiver receives messages defined in the Sleepy service trait
/// Allows actors to `sleep` for a specified duration, or until a desired time.
/// contractId: "jclmnop:sleepy"
#[doc(hidden)]
#[async_trait]
pub trait SleepyReceiver: MessageDispatch + Sleepy {
    async fn dispatch(
        &self,
        ctx: &Context,
        message: Message<'_>,
    ) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "Sleep" => {
                let value: u32 = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'U32': {}", e)))?;

                let _resp = Sleepy::sleep(self, ctx, &value).await?;
                let buf = Vec::new();
                Ok(buf)
            }
            "SleepUntil" => {
                let value: Timestamp = wasmbus_rpc::common::deserialize(
                    &message.arg,
                )
                .map_err(|e| RpcError::Deser(format!("'Timestamp': {}", e)))?;

                let _resp = Sleepy::sleep_until(self, ctx, &value).await?;
                let buf = Vec::new();
                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Sleepy::{}",
                message.method
            ))),
        }
    }
}

/// SleepySender sends messages to a Sleepy service
/// Allows actors to `sleep` for a specified duration, or until a desired time.
/// contractId: "jclmnop:sleepy"
/// client for sending Sleepy messages
#[derive(Clone, Debug)]
pub struct SleepySender<T: Transport> {
    transport: T,
}

impl<T: Transport> SleepySender<T> {
    /// Constructs a SleepySender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(target_arch = "wasm32")]
impl SleepySender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for sending to a Sleepy provider
    /// implementing the 'jclmnop:sleepy' capability contract, with the "default" link
    pub fn new() -> Self {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_provider(
            "jclmnop:sleepy",
            "default",
        )
        .unwrap();
        Self { transport }
    }

    /// Constructs a client for sending to a Sleepy provider
    /// implementing the 'jclmnop:sleepy' capability contract, with the specified link name
    pub fn new_with_link(
        link_name: &str,
    ) -> wasmbus_rpc::error::RpcResult<Self> {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_provider(
            "jclmnop:sleepy",
            link_name,
        )?;
        Ok(Self { transport })
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Sleepy
    for SleepySender<T>
{
    #[allow(unused)]
    /// Sleep for a specified number of milliseconds
    /// ```
    /// # use wasmcloud_interface_sleepy::SleepySender;
    /// # async fn sleep_for_5_seconds() {
    /// let sleepy = SleepySender::new();
    /// // sleep for 5 seconds
    /// sleepy.sleep(5000).await;
    /// # }
    async fn sleep(&self, ctx: &Context, arg: &u32) -> RpcResult<()> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Sleepy.Sleep",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;
        Ok(())
    }
    #[allow(unused)]
    /// Sleep until a specified time, provided as a `wasmbus_rpc::Timestamp` struct.
    /// If the specified time is in the past, the operation will return immediately.
    /// ```
    /// # use wasmcloud_interface_sleepy::SleepySender;
    /// # use wasmbus_rpc::Timestamp;
    /// # async fn sleep_until_5_seconds() {
    /// let sleepy = SleepySender::new();
    /// let now = Timestamp::now();
    /// let five_seconds = Timestamp::new(now.sec + 5, now.nsec);
    /// // sleep until 5 seconds from now
    /// sleepy.sleep_until(five_seconds).await;
    /// # }
    async fn sleep_until(
        &self,
        ctx: &Context,
        arg: &Timestamp,
    ) -> RpcResult<()> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Sleepy.SleepUntil",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;
        Ok(())
    }
}
